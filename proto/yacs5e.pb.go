// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yacs5e.proto

/*
Package yacs5e is a generated protocol buffer package.

It is generated from these files:
	yacs5e.proto

It has these top-level messages:
	TUser
	Empty
*/
package yacs5e

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TUser struct {
	Login       string `protobuf:"bytes,1,opt,name=login" json:"login,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	RespToken   string `protobuf:"bytes,3,opt,name=respToken" json:"respToken,omitempty"`
	VisibleName string `protobuf:"bytes,4,opt,name=visibleName" json:"visibleName,omitempty"`
}

func (m *TUser) Reset()                    { *m = TUser{} }
func (m *TUser) String() string            { return proto.CompactTextString(m) }
func (*TUser) ProtoMessage()               {}
func (*TUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TUser) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *TUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TUser) GetRespToken() string {
	if m != nil {
		return m.RespToken
	}
	return ""
}

func (m *TUser) GetVisibleName() string {
	if m != nil {
		return m.VisibleName
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*TUser)(nil), "TUser")
	proto.RegisterType((*Empty)(nil), "Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for YACS5E service

type YACS5EClient interface {
	// ERROR CODES:
	// 100: UNKNOWN ERROR
	// 101: INVALID LOGIN
	// 102: INVALID PASSWORD
	// 103: USER EXISTS
	Registration(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*Empty, error)
	// ERROR CODES:
	// 110: UNKNOWN ERROR
	// 111: INVALID LOGIN
	// 112: INVALID PASSWORD
	// 113: USER EXISTS
	Login(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*Empty, error)
}

type yACS5EClient struct {
	cc *grpc.ClientConn
}

func NewYACS5EClient(cc *grpc.ClientConn) YACS5EClient {
	return &yACS5EClient{cc}
}

func (c *yACS5EClient) Registration(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/YACS5e/Registration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yACS5EClient) Login(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/YACS5e/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for YACS5E service

type YACS5EServer interface {
	// ERROR CODES:
	// 100: UNKNOWN ERROR
	// 101: INVALID LOGIN
	// 102: INVALID PASSWORD
	// 103: USER EXISTS
	Registration(context.Context, *TUser) (*Empty, error)
	// ERROR CODES:
	// 110: UNKNOWN ERROR
	// 111: INVALID LOGIN
	// 112: INVALID PASSWORD
	// 113: USER EXISTS
	Login(context.Context, *TUser) (*Empty, error)
}

func RegisterYACS5EServer(s *grpc.Server, srv YACS5EServer) {
	s.RegisterService(&_YACS5E_serviceDesc, srv)
}

func _YACS5E_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YACS5EServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YACS5e/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YACS5EServer).Registration(ctx, req.(*TUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _YACS5E_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YACS5EServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YACS5e/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YACS5EServer).Login(ctx, req.(*TUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _YACS5E_serviceDesc = grpc.ServiceDesc{
	ServiceName: "YACS5e",
	HandlerType: (*YACS5EServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _YACS5E_Registration_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _YACS5E_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yacs5e.proto",
}

func init() { proto.RegisterFile("yacs5e.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xa9, 0x4c, 0x4c, 0x2e,
	0x36, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xaa, 0xe4, 0x62, 0x0d, 0x09, 0x2d, 0x4e,
	0x2d, 0x12, 0x12, 0xe1, 0x62, 0xcd, 0xc9, 0x4f, 0xcf, 0xcc, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0x70, 0x84, 0xa4, 0xb8, 0x38, 0x0a, 0x12, 0x8b, 0x8b, 0xcb, 0xf3, 0x8b, 0x52, 0x24,
	0x98, 0xc0, 0x12, 0x70, 0xbe, 0x90, 0x0c, 0x17, 0x67, 0x51, 0x6a, 0x71, 0x41, 0x48, 0x7e, 0x76,
	0x6a, 0x9e, 0x04, 0x33, 0x58, 0x12, 0x21, 0x20, 0xa4, 0xc0, 0xc5, 0x5d, 0x96, 0x59, 0x9c, 0x99,
	0x94, 0x93, 0xea, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x02, 0x96, 0x47, 0x16, 0x52, 0x62, 0xe7, 0x62,
	0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x34, 0x72, 0xe4, 0x62, 0x8b, 0x74, 0x74, 0x0e, 0x36, 0x4d, 0x15,
	0x92, 0xe3, 0xe2, 0x09, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x13,
	0x62, 0xd3, 0x03, 0x3b, 0x4e, 0x8a, 0x4d, 0x0f, 0xac, 0x52, 0x48, 0x9c, 0x8b, 0xd5, 0x07, 0xec,
	0x2e, 0x34, 0x89, 0x24, 0x36, 0xb0, 0x6f, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0xda,
	0xd5, 0x28, 0xdd, 0x00, 0x00, 0x00,
}
